import { ɵɵdefineInjectable, Injectable, Component, EventEmitter, Input, Output, Pipe, NgModule } from '@angular/core';

class Ng9PaginationService {
    constructor() { }
}
Ng9PaginationService.ɵprov = ɵɵdefineInjectable({ factory: function Ng9PaginationService_Factory() { return new Ng9PaginationService(); }, token: Ng9PaginationService, providedIn: "root" });
Ng9PaginationService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
Ng9PaginationService.ctorParameters = () => [];

class Ng9PaginationComponent {
    constructor() { }
    ngOnInit() {
    }
}
Ng9PaginationComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-ng9-pagination',
                template: `
    <p>
      ng9-pagination works!
    </p>
  `
            },] }
];
Ng9PaginationComponent.ctorParameters = () => [];

class PageControlsComponent {
    constructor() {
        this.pageChange = new EventEmitter();
        this.totalPages = 0;
    }
    ngOnInit() {
        this.totalPages = Math.round(this.arrayLength / this.itemsPerPage);
    }
    onNext() {
        if (this.pageKey < this.totalPages) {
            if (this.pageKey++ == this.totalPages) {
                //disableNextBUtton
            }
            this.pageChange.emit(this.pageKey++);
        }
    }
    prevPage() {
        if ((this.pageKey - 1) > 0) {
            this.pageChange.emit(this.pageKey - 1);
        }
    }
    enablePrev() {
        if (this.pageKey == 1) {
            return true;
        }
        return false;
    }
    enableNext() {
        if (this.pageKey == this.totalPages) {
            return true;
        }
        return false;
    }
}
PageControlsComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng9-pageControls',
                template: "\n<button [disabled]=\"enablePrev()\"   class=\"pbtn pagination-primary \" (click)=\"prevPage()\" > < </button> \n\n<button class=\" pbtn pagination-light\" > \n    {{pageKey}} of {{totalPages}} </button> \n<button [disabled]=\"enableNext()\"  class=\"pbtn pagination-primary\" (click)=\"onNext()\" >  > </button>",
                styles: [".cursorDisable{background-color:0!important;cursor:not-allowed!important}.pagination-primary{background-color:#007bff!important;border-color:#007bff!important;color:#fff!important}.pagination-primary:active,.pagination-primary:hover{background-color:#0062cc!important;border-color:#005cbf!important;color:#fff}.pagination-primary:focus{background-color:#0069d9!important;border-color:#0062cc!important;box-shadow:0 0 0 .2rem rgba(38,143,255,.5);color:#fff!important}.pbtn{-moz-user-select:none;-webkit-user-select:none;background-color:initial;border:1px solid transparent;border-radius:.25rem;color:#212529;display:inline-block;font-size:1rem;font-weight:400;line-height:1.5;padding:.375rem .75rem;text-align:center;transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;user-select:none;vertical-align:middle}.pbtn:focus{outline:0}.pagination-light{background-color:#f8f9fa;border-color:#f8f9fa;color:#212529}.pagination-light:focus{background-color:#e2e6ea;border-color:#dae0e5;box-shadow:0 0 0 .2rem rgba(216,217,219,.5);color:#212529}.pagination-light:active{background-color:#dae0e5;border-color:#d3d9df;color:#212529}.pagination-light:hover{background-color:#e2e6ea;border-color:#dae0e5;color:#212529}"]
            },] }
];
PageControlsComponent.ctorParameters = () => [];
PageControlsComponent.propDecorators = {
    pageKey: [{ type: Input }],
    arrayLength: [{ type: Input }],
    itemsPerPage: [{ type: Input }],
    pageChange: [{ type: Output }]
};

class PipePaginationPipe {
    transform(value, args) {
        console.log(args);
        let startIndex = 0;
        let endIndex = 0;
        if (value.length > args.itemsPerPage) {
            if (args.PageKey != 0) {
                startIndex = (args.PageKey - 1) * args.itemsPerPage;
            }
            else {
                startIndex = args.PageKey * args.itemsPerPage;
            }
            endIndex = (startIndex + (args.itemsPerPage - 1));
            return value.filter((item, index) => {
                return ((index >= startIndex) && (index <= endIndex));
            });
        }
        else {
            return value;
        }
    }
}
PipePaginationPipe.decorators = [
    { type: Pipe, args: [{
                name: 'pipePagination'
            },] }
];

class Ng9PaginationModule {
}
Ng9PaginationModule.decorators = [
    { type: NgModule, args: [{
                declarations: [Ng9PaginationComponent,
                    PageControlsComponent, PipePaginationPipe],
                imports: [],
                exports: [Ng9PaginationComponent,
                    PageControlsComponent, PipePaginationPipe]
            },] }
];

/*
 * Public API Surface of ng9-pagination
 */

/**
 * Generated bundle index. Do not edit.
 */

export { Ng9PaginationComponent, Ng9PaginationModule, Ng9PaginationService, PageControlsComponent, PipePaginationPipe };
//# sourceMappingURL=ng9-pagination.js.map
