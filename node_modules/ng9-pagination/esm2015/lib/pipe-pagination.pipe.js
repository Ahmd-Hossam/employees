import { Pipe } from '@angular/core';
export class PipePaginationPipe {
    transform(value, args) {
        console.log(args);
        let startIndex = 0;
        let endIndex = 0;
        if (value.length > args.itemsPerPage) {
            if (args.PageKey != 0) {
                startIndex = (args.PageKey - 1) * args.itemsPerPage;
            }
            else {
                startIndex = args.PageKey * args.itemsPerPage;
            }
            endIndex = (startIndex + (args.itemsPerPage - 1));
            return value.filter((item, index) => {
                return ((index >= startIndex) && (index <= endIndex));
            });
        }
        else {
            return value;
        }
    }
}
PipePaginationPipe.decorators = [
    { type: Pipe, args: [{
                name: 'pipePagination'
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwZS1wYWdpbmF0aW9uLnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZzktcGFnaW5hdGlvbi9zcmMvbGliL3BpcGUtcGFnaW5hdGlvbi5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBVXBELE1BQU0sT0FBTyxrQkFBa0I7SUFFN0IsU0FBUyxDQUFDLEtBQWdCLEVBQUUsSUFBVTtRQUNwQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ2pCLElBQUksVUFBVSxHQUFTLENBQUMsQ0FBRTtRQUMxQixJQUFJLFFBQVEsR0FBUyxDQUFDLENBQUU7UUFDeEIsSUFBRyxLQUFLLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUM7WUFDbEMsSUFBRyxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsRUFBRTtnQkFDcEIsVUFBVSxHQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFFO2FBQ3JEO2lCQUFJO2dCQUNQLFVBQVUsR0FBSSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUU7YUFDakQ7WUFDQyxRQUFRLEdBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUU7WUFDcEQsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFDLEtBQUssRUFBQyxFQUFFO2dCQUNoQyxPQUFNLENBQUMsQ0FBQyxLQUFLLElBQUssVUFBVSxDQUFDLElBQU0sQ0FBQyxLQUFLLElBQUssUUFBUSxDQUFDLENBQUMsQ0FBQTtZQUMxRCxDQUFDLENBQUMsQ0FBQztTQUNKO2FBQUs7WUFDSixPQUFPLEtBQUssQ0FBQztTQUNkO0lBRUQsQ0FBQzs7O1lBdkJGLElBQUksU0FBQztnQkFDSixJQUFJLEVBQUUsZ0JBQWdCO2FBQ3ZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIG9wdCAgeyBcbiAgaXRlbXNQZXJQYWdlIDogYW55LFxuICBQYWdlS2V5IDogYW55LFxufVxuXG5AUGlwZSh7XG4gIG5hbWU6ICdwaXBlUGFnaW5hdGlvbidcbn0pXG5leHBvcnQgY2xhc3MgUGlwZVBhZ2luYXRpb25QaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG5cbiAgdHJhbnNmb3JtKHZhbHVlOkFycmF5PGFueT4sIGFyZ3MgOiBvcHQpIHtcbiAgICBjb25zb2xlLmxvZyhhcmdzKSBcbiAgICBsZXQgc3RhcnRJbmRleCA6IGFueSA9IDAgO1xuICAgIGxldCBlbmRJbmRleCA6IGFueSA9IDAgO1xuICAgIGlmKHZhbHVlLmxlbmd0aCA+IGFyZ3MuaXRlbXNQZXJQYWdlKXtcbiAgICAgIGlmKGFyZ3MuUGFnZUtleSAhPSAwICl7XG4gICAgICAgIHN0YXJ0SW5kZXggPSAgKGFyZ3MuUGFnZUtleS0xKSAqIGFyZ3MuaXRlbXNQZXJQYWdlIDtcbiAgICAgIH1lbHNle1xuICAgIHN0YXJ0SW5kZXggPSAgYXJncy5QYWdlS2V5ICogYXJncy5pdGVtc1BlclBhZ2UgO1xuICB9XG4gICAgZW5kSW5kZXggPSAgKHN0YXJ0SW5kZXggKyAoYXJncy5pdGVtc1BlclBhZ2UgLSAxKSkgOyBcbiAgICByZXR1cm4gdmFsdWUuZmlsdGVyKChpdGVtLGluZGV4KT0+IHtcbiAgICAgIHJldHVybigoaW5kZXggPj0gIHN0YXJ0SW5kZXgpICAmJiAgKGluZGV4IDw9ICBlbmRJbmRleCkpXG4gICAgfSk7XG4gIH1lbHNlIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgICBcbiAgfVxuXG59XG4iXX0=